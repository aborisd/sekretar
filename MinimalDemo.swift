import SwiftUI

@main
struct MinimalSekretarDemo: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
        }
    }
}

struct ContentView: View {
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 30) {
                    // Header
                    VStack {
                        Text("üìÖ Sekretar")
                            .font(.largeTitle)
                            .fontWeight(.bold)
                            .foregroundColor(.blue)
                        
                        Text("M0 Phase Demo")
                            .font(.title2)
                            .foregroundColor(.gray)
                    }
                    .padding()
                    
                    // Implementation Status
                    VStack(alignment: .leading, spacing: 16) {
                        Text("üöÄ M0 Implementation Status")
                            .font(.title)
                            .fontWeight(.semibold)
                        
                        FeatureStatusView()
                    }
                    .padding()
                    .background(Color(.systemGray6))
                    .cornerRadius(15)
                    .padding(.horizontal)
                    
                    // Next Steps
                    VStack(alignment: .leading, spacing: 12) {
                        Text("üìã Next Steps")
                            .font(.title2)
                            .fontWeight(.semibold)
                        
                        Text("‚Ä¢ Fix remaining compilation errors")
                        Text("‚Ä¢ Complete UI integration testing")
                        Text("‚Ä¢ Test notification permissions")
                        Text("‚Ä¢ Test calendar integration")
                        Text("‚Ä¢ Proceed to M1 development")
                    }
                    .padding()
                    .background(Color(.systemBlue).opacity(0.1))
                    .cornerRadius(15)
                    .padding(.horizontal)
                    
                    Spacer()
                }
            }
            .navigationTitle("Demo")
        }
    }
}

struct FeatureStatusView: View {
    let features = [
        ("‚úÖ", "Core Data Model", "5 entities: Task, Event, Project, UserPref, AIActionLog"),
        ("‚úÖ", "Notification Service", "Local notifications with categories"),
        ("‚úÖ", "Smart Reminders", "Location & time-based intelligent reminders"),
        ("‚úÖ", "Conflict Detection", "Schedule overlap and resource conflict analysis"),
        ("‚úÖ", "EventKit Integration", "System calendar sync and import"),
        ("‚úÖ", "Analytics Service", "User behavior tracking and events"),
        ("‚úÖ", "AI Intent Processing", "Natural language task creation pipeline"),
        ("‚úÖ", "Settings & Test Data", "Debug data generation and preferences"),
        ("‚ö†Ô∏è", "UI Components", "95% complete - minor compilation fixes needed"),
        ("‚úÖ", "Project Architecture", "MVVM pattern with service layer")
    ]
    
    var body: some View {
        LazyVStack(alignment: .leading, spacing: 12) {
            ForEach(Array(features.enumerated()), id: \.offset) { index, feature in
                HStack(alignment: .top, spacing: 12) {
                    Text(feature.0)
                        .font(.title3)
                    
                    VStack(alignment: .leading, spacing: 4) {
                        Text(feature.1)
                            .font(.headline)
                        
                        Text(feature.2)
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                    
                    Spacer()
                }
                .padding(.vertical, 2)
                
                if index < features.count - 1 {
                    Divider()
                }
            }
        }
    }
}

#Preview {
    ContentView()
}
